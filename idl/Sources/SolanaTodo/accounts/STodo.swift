/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation
import Solana
import Beet
import BeetSolana


/**
* Arguments used to create {@link Stodo}
* @category Accounts
* @category generated
*/
public protocol StodoArgs {
    
     var timestamp: Int64 { get }
     var content: String { get }
     var isFinished: Bool { get }
}

/**
 * Holds the data for the {@link Stodo} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
public struct Stodo: StodoArgs {
  

  public let timestamp: Int64
  public let content: String
  public let isFinished: Bool

  /**
   * Creates a {@link Stodo} instance from the provided args.
   */
  public static func fromArgs(args: Args) -> Stodo {
    return Stodo(
        timestamp: args["timestamp"] as! Int64,
        content: args["content"] as! String,
        isFinished: args["isFinished"] as! Bool
    )
  }
  /**
   * Deserializes the {@link Stodo} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func fromAccountInfo(
    accountInfo: Foundation.Data,
    offset:Int=0
  ) -> ( Stodo, Int )  {
    return Stodo.deserialize(buf: accountInfo, offset: offset)
  }
  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Stodo} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  public static func fromAccountAddress(
    connection: Api,
    address: PublicKey,
    onComplete: @escaping (Result<Stodo, Error>) -> Void
  ) {
    connection.getAccountInfo(account: address.base58EncodedString) { result in
        switch result {
            case .success(let pureData):
                if let data = pureData.data?.value {
                    onComplete(.success(Stodo.deserialize(buf: data).0))
                } else {
                    onComplete(.failure(SolanaError.nullValue))
                }
            case .failure(let error):
                onComplete(.failure(error))
        }
    }
  }
  /**
   * Deserializes the {@link Stodo} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  public static func deserialize(
    buf: Foundation.Data,
    offset: Int = 0
  ) -> ( Stodo, Int ) {
    return sTodoBeet.deserialize(buffer: buf, offset: offset)
  }
  /**
   * Serializes the {@link Stodo} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  public func serialize() -> ( Foundation.Data, Int ) {
    return sTodoBeet.serialize(instance: [
        "timestamp" : self.timestamp,
        "content" : self.content,
        "isFinished" : self.isFinished
        ])
  }
  /**
* Returns the byteSize of a {@link Buffer} holding the serialized data of
* {@link Stodo} for the provided args.
*
* @param args need to be provided since the byte size for this account
* depends on them
*/
static func byteSize(args: StodoArgs) -> UInt64 {
    return UInt64(sTodoBeet.toFixedFromValue(val: args).byteSize)
}
/**
* Fetches the minimum balance needed to exempt an account holding
* {@link Stodo} data from rent
*
* @param args need to be provided since the byte size for this account
* depends on them
* @param connection used to retrieve the rent exemption information
*/
static func getMinimumBalanceForRentExemption(
    args: StodoArgs,
    connection: Api,
    commitment: Commitment?,
    onComplete: @escaping(Result<UInt64, Error>) -> Void
) {
    return connection.getMinimumBalanceForRentExemption(dataLength: Stodo.byteSize(args: args), commitment: commitment, onComplete: onComplete)
}
}
  /**
   * @category Accounts
   * @category generated
   */
  public let sTodoBeet = FixableBeetStruct<Stodo>(
    fields:[
        
        ("timestamp", Beet.fixedBeet(.init(value: .scalar(i64())))),
        ("content", Beet.fixableBeat(Utf8String())),
        ("isFinished", Beet.fixedBeet(.init(value: .scalar(bool()))))
    ],
    construct: Stodo.fromArgs,
    description: "Stodo"
)
